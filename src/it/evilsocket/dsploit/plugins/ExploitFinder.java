/*
 * This file is part of the dSploit.
 *
 * Copyleft of Simone Margaritelli aka evilsocket <evilsocket@gmail.com>
 *
 * dSploit is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * dSploit is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with dSploit.  If not, see <http://www.gnu.org/licenses/>.
 */
package it.evilsocket.dsploit.plugins;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;

import android.content.Context;
import android.content.Intent;
import android.graphics.Interpolator.Result;
import android.graphics.Typeface;
import android.net.Uri;
import android.os.Bundle;
import android.text.Html;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.widget.ArrayAdapter;
import android.widget.BaseExpandableListAdapter;
import android.widget.ExpandableListView;
import android.widget.ExpandableListView.OnChildClickListener;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.ToggleButton;
import it.evilsocket.dsploit.R;
import it.evilsocket.dsploit.core.Plugin;
import it.evilsocket.dsploit.core.System;
import it.evilsocket.dsploit.gui.dialogs.FinishDialog;
import it.evilsocket.dsploit.net.Target;
import it.evilsocket.dsploit.net.Target.Port;
import it.evilsocket.dsploit.net.Target.Vulnerability;
import it.evilsocket.dsploit.net.Target.Exploit;

public class ExploitFinder extends Plugin 
{
	private final static String  TAG = "EXPLOITFINDER";

	private ToggleButton       mSearchToggleButton = null;
	private ProgressBar	       mSearchProgress     = null;
	private ListView 			mListView		   = null;		
	private boolean	           mRunning			   = false;
	private Thread			   mThread			   = null;
	private ArrayList<Exploit> results = new ArrayList<Target.Exploit>();
	private ArrayAdapter<Exploit> mAdapter = null;
	
	public ExploitFinder() {
		super
		( 
		    "Exploit Finder", 
		    "Search for exploit that matches found vulnerabilities.", 
		    new Target.Type[]{ Target.Type.ENDPOINT, Target.Type.REMOTE }, 
		    R.layout.plugin_exploit_finder,
		    R.drawable.action_exploit_finder 
		);
	}
		
	private void setStartedState( ) {
		mSearchProgress.setVisibility( View.VISIBLE );
		mRunning = true;
		
		mThread = new Thread( new Runnable()
		{ 
			@Override
			public void run() 
			{
				for( final ArrayList<Vulnerability> vulns : System.getCurrentTarget().getVulnerabilities().values() )
		        {
					String none = null;
					for ( final Vulnerability vuln : vulns)
					{
						if( !mRunning ) return;
						Exploit ex;
	    				if(vuln.osvdb_id!=0)
	    				{
	    					ex = MSFDatabase.search_by_osvdb(vuln.osvdb_id); 
	    					if(ex!=null)
	    					{
	    						results.add(ex);
	    					}
	    					else
	    					{
	    						for( final Exploit exp : EXDatabase.search_by_osvdb(vuln.osvdb_id))
	    							results.add(exp);
	    					}
	    				}
	    				if(vuln.cve_id!=null)
	    				{
	    					// substring remove "CVE-"
	    					ex = MSFDatabase.search_by_cve(vuln.cve_id.substring(4)); 
	    					if(ex != null)
	    					{
	    						results.add(ex);
	    					}
	    					else
	    					{
	    						for( final Exploit exp : EXDatabase.search_by_cveid(vuln.cve_id.substring(4)))
	    							results.add(exp);
	    					}
	    				}
					}
		        }
		        		
	    		if( results == null )
	    		{
	    			// error parsing the page
	    			Log.e( TAG, "No exploits found." );
	    		}
	    		else if( results.size() > 0 )
	    		{
	    			for( final Exploit ex : results )
	    			{
	    				System.addExploit(ex);
	    				
		    			ExploitFinder.this.runOnUiThread( new Runnable() {
							@Override
							public void run()
							{
								mAdapter.add(ex);
							}							
						});	
	    			}
	    		}
	    		else
	    		{
	    			ExploitFinder.this.runOnUiThread( new Runnable() {
						@Override
						public void run()
						{						
							mAdapter.add(null);
						}							
					});		
	    		}
				ExploitFinder.this.runOnUiThread( new Runnable() {
					@Override
					public void run()
					{						
						setStoppedState();
					}							
				});	
			}
		}  
		);
		
		mThread.start();
	}
	
	private void setStoppedState( ) {		
		try
		{
			if( mThread != null )
			{
				mThread.interrupt();
				mThread.stop();
			}
		}
		catch( Exception e )
		{
			
		}
		
		mRunning = false;
		mSearchToggleButton.setChecked( false );    
		mSearchProgress.setVisibility( View.GONE );
	}
	
	public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);   
        
        if( System.getCurrentTarget().hasOpenPorts() == false )
        	new FinishDialog( "Warning", "No open ports detected on current target, run the service inspector first.", this ).show();
        
        else if( System.getCurrentTarget().hasOpenPortsWithService() == false )
        	new FinishDialog( "Warning", "No specific informations about services running on target machine, run the service inspector first.", this ).show();
                
        else if( System.getCurrentTarget().hasVulnerabilities() == false)
        	new FinishDialog( "Warning", "No vulnerabilities found about this target. rune the VulnerabilityFinder first.", this ).show();
        mSearchToggleButton = ( ToggleButton )findViewById( R.id.searchToggleButton );
        mSearchProgress	   = ( ProgressBar )findViewById( R.id.searchActivity );
        mListView		   = ( ListView )findViewById( R.id.searchListView );
        mAdapter		   = new ArrayAdapter<Exploit>(this, android.R.layout.simple_list_item_1, results);
        
        		        
        mListView.setAdapter( mAdapter );  
        /*
        mListView.setOnChildClickListener( new OnChildClickListener(){
			@Override
			public boolean onChildClick( ExpandableListView parent, View v, int groupPosition, int childPosition, long id ) {
				Vulnerability cve = ( Vulnerability )mAdapter.getChild(groupPosition, childPosition);
				
				if( cve != null )
				{
					String uri     = "http://web.nvd.nist.gov/view/vuln/detail?vulnId=" + cve.getIdentifier();
					Intent browser = new Intent( Intent.ACTION_VIEW, Uri.parse( uri ) );
					
					startActivity( browser );
				}
				
				return true;
			}}
        );
        
		for( int i = 0; i < mAdapter.getGroupCount(); i++ )
		{
			mListView.expandGroup( i );
		}*/
                
        mSearchToggleButton.setOnClickListener( new OnClickListener(){
			@Override
			public void onClick(View v) {
				if( mRunning )
				{
					setStoppedState();
				}
				else
				{
					setStartedState();
				}
			}} 
		);                
	}
	
	@Override
	public void onBackPressed() {
	    setStoppedState();	
	    super.onBackPressed();
	    overridePendingTransition(R.anim.slide_in_left, R.anim.slide_out_left);	    	    
	}
}
